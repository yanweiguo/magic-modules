<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overview on Magic Modules</title><link>https://googlecloudplatform.github.io/magic-modules/</link><description>Recent content in Overview on Magic Modules</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://googlecloudplatform.github.io/magic-modules/index.xml" rel="self" type="application/rss+xml"/><item><title>Generate the providers</title><link>https://googlecloudplatform.github.io/magic-modules/get-started/generate-providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/get-started/generate-providers/</guid><description>Generate google and google-beta providers # This quickstart guides you through setting up your development environment, making a change to magic-modules, generating provider changes to the google and google-beta Terraform providers, and running tests related to the change.
Before you begin # Install the gcloud CLI. In the Google Cloud console, on the project selector page, select or create a Google Cloud project. Note: If you don&amp;rsquo;t already have a project to use for testing changes to the Terraform providers, create a project instead of selecting an existing poject.</description></item><item><title>make commands</title><link>https://googlecloudplatform.github.io/magic-modules/reference/make-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/reference/make-commands/</guid><description>make commands reference # magic-modules # make / make provider # Generates the code for the downstream google and google-beta providers.
Note: Generation works best if the downstream provider has a commit checked out corresponding to the latest main branch commit that is present in your magic-modules working branch. This can generally be identified based on matching commit messages. Examples:
make provider VERSION=ga OUTPUT_PATH=&amp;#34;$GOPATH/src/github.com/hashicorp/terraform-provider-google&amp;#34; make provider VERSION=beta OUTPUT_PATH=&amp;#34;$GOPATH/src/github.com/hashicorp/terraform-provider-google-beta&amp;#34; # Only generate a specific product (plus all common files) make provider VERSION=ga OUTPUT_PATH=&amp;#34;$GOPATH/src/github.</description></item><item><title>Write release notes</title><link>https://googlecloudplatform.github.io/magic-modules/contribute/release-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/contribute/release-notes/</guid><description>Write release notes # This guide explains best practices for composing accurate, end-user focused release notes for Magic Modules pull requests.
Every pull request must have at least one release note block in the opening comment. Release note blocks have the following format:
```release-note:TYPE CONTENT ``` Replace TYPE with the correct release note type, and CONTENT with a release note written according to the guidelines in the following sections.</description></item><item><title>Review a PR</title><link>https://googlecloudplatform.github.io/magic-modules/contribute/review-pr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/contribute/review-pr/</guid><description>Review a PR # This page provides guidelines for reviewing Magic Modules pull requests
Read the PR description to understand the context and ensure the PR either is linked to a GitHub issue or an internal bug if not, check the issue tracker to see whether the feature has already been requested and add the issues in the description, if any. establishes clear context itself via title or description. If the PR adds any new resource, ensure that the resource does not already exists in the GA provider or beta provider Read through all the changes in the PR, generated code in the downstreams and the API documentation to ensure that: the resource schema added in the PR matches the API structure.</description></item><item><title>How Magic Modules works</title><link>https://googlecloudplatform.github.io/magic-modules/get-started/how-magic-modules-works/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/get-started/how-magic-modules-works/</guid><description>How Magic Modules works # Magic Modules can be thought of as a source of truth for how to map a GCP API resource representation to a Terraform resource (or datasource) representation. Magic Modules uses that mapping (and additional handwritten code where necessary) to generate &amp;ldquo;downstream&amp;rdquo; repositories - in particular, the Terraform providers for Google Platform: google (or TPG) and google-beta (or TPGB).
Generation of the downstream repositories happens for every new commit in a PR (to a temporary branch owned by the modular-magician robot user) and on every merge into the main branch (to the main branch of downstreams).</description></item><item><title>Resource YAML reference ↗</title><link>https://googlecloudplatform.github.io/magic-modules/reference/resource-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/reference/resource-reference/</guid><description>FORCE MENU RENDER</description></item><item><title>Add or modify a resource</title><link>https://googlecloudplatform.github.io/magic-modules/develop/resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/resource/</guid><description>Add or modify a resource # This page describes how to add a new resource to the google or google-beta Terraform provider using MMv1 and/or handwritten code.
For more information about types of resources and the generation process overall, see How Magic Modules works.
Before you begin # Complete the Generate the providers quickstart to set up your environment and your Google Cloud project. Ensure that your magic-modules, terraform-provider-google, and terraform-provider-google-beta repositories are up to date.</description></item><item><title>Field YAML reference ↗</title><link>https://googlecloudplatform.github.io/magic-modules/reference/field-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/reference/field-reference/</guid><description>FORCE MENU RENDER</description></item><item><title>IAM policy YAML reference ↗</title><link>https://googlecloudplatform.github.io/magic-modules/reference/iam-policy-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/reference/iam-policy-reference/</guid><description>FORCE MENU RENDER</description></item><item><title>Run provider tests</title><link>https://googlecloudplatform.github.io/magic-modules/get-started/run-provider-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/get-started/run-provider-tests/</guid><description>Run provider tests locally # Note: If you want to test changes you&amp;rsquo;ve made in Magic Modules, you need to first generate the provider you want to test. Setup # Authentication is described in more detail here.
Tests generally assume the following environment variables must be set in order to run tests:
GOOGLE_PROJECT GOOGLE_CREDENTIALS|GOOGLE_CLOUD_KEYFILE_JSON|GCLOUD_KEYFILE_JSON|GOOGLE_USE_DEFAULT_CREDENTIALS GOOGLE_REGION GOOGLE_ZONE Note that the credentials you provide must be granted wide permissions on the specified project.</description></item><item><title>Add an MMv1 test</title><link>https://googlecloudplatform.github.io/magic-modules/develop/add-mmv1-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/add-mmv1-test/</guid><description>An example terraform configuration can be used to generate docs and tests for a resource.</description></item><item><title>Use built provider</title><link>https://googlecloudplatform.github.io/magic-modules/get-started/use-built-provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/get-started/use-built-provider/</guid><description>Use built provider locally # Note: If you want to test changes you&amp;rsquo;ve made in Magic Modules, you need to first generate the provider you want to test. Sometimes, for example for manual testing, you may want to build the provider from source and use it with terraform.
Developer Overrides # Note: Developer overrides are only available in Terraform v0.14 and later. By default Terraform will download providers from the public Registry, but there are several ways to override this behaviour and use providers from other sources.</description></item><item><title>Add a handwritten test</title><link>https://googlecloudplatform.github.io/magic-modules/develop/add-handwritten-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/add-handwritten-test/</guid><description>For handwritten resources and generated resources that need to test update, handwritten tests must be added.</description></item><item><title>Breaking change detector</title><link>https://googlecloudplatform.github.io/magic-modules/reference/breaking-change-detector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/reference/breaking-change-detector/</guid><description>This page discusses the breaking change detector analysis</description></item><item><title>Contributing</title><link>https://googlecloudplatform.github.io/magic-modules/get-started/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/get-started/contributing/</guid><description>General contributing steps # If you haven&amp;rsquo;t done so already, fork the Magic Modules repository into your GitHub account.
Check the issue tracker to see whether your feature has already been requested.
If there&amp;rsquo;s an issue and it already has a dedicated assignee, this indicates that someone might have already started to work on a solution. Otherwise, you&amp;rsquo;re welcome to work on the issue. Check whether the resource you would like to work on already exists in the following places:</description></item><item><title>Add a datasource</title><link>https://googlecloudplatform.github.io/magic-modules/develop/add-handwritten-datasource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/add-handwritten-datasource/</guid><description>Datasources are like terraform resources except they don&amp;rsquo;t &lt;em>create&lt;/em> anything.</description></item><item><title>Provider documentation</title><link>https://googlecloudplatform.github.io/magic-modules/get-started/provider-documentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/get-started/provider-documentation/</guid><description>Provider documentation # The provider is documented on HashiCorp&amp;rsquo;s Terraform Registry, which includes information about individual resources and datasources, and includes guides to help users configure or upgrade the provider in their projects.
This document includes details about how provider documentation is used by the Terraform Registry, how it is made in the Magic Modules repo, and tools you can use when editing documentation.
There are other pages under How To that describe how to approach making additions to the documentation.</description></item><item><title>Add datasource documentation</title><link>https://googlecloudplatform.github.io/magic-modules/develop/add-handwritten-datasource-documentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/add-handwritten-datasource-documentation/</guid><description>New handwritten datasources require new handwritten documentation to be created.</description></item><item><title>Promote to GA</title><link>https://googlecloudplatform.github.io/magic-modules/develop/promote-to-ga/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/promote-to-ga/</guid><description>Promote from beta to GA # This document describes how to promote an existing resource or field that uses MMv1 and/or handwritten code from the google-beta provider to the google (also known as &amp;ldquo;GA&amp;rdquo;) provider.
Handwritten code (including custom_code) commonly uses &amp;ldquo;version guards&amp;rdquo; in the form of &amp;lt;% unless version == 'ga' -%&amp;gt;...&amp;lt;% end -%&amp;gt; to wrap code that is beta-specific, which need to be removed during promotion.
For more information about types of resources and the generation process overall, see How Magic Modules works.</description></item><item><title>Make a breaking change</title><link>https://googlecloudplatform.github.io/magic-modules/develop/make-a-breaking-change/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/make-a-breaking-change/</guid><description>Guidance on making a breaking change during a major release</description></item></channel></rss>